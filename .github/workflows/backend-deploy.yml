name: Backend Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=raw,value=backend-latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=production

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # PATH für alle Befehle setzen
            export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            
            echo "Starting deployment..."
            cd /opt/gifthuette
            
            # Docker Login für Registry-Zugriff
            echo "Logging in to GitHub Container Registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | /usr/bin/docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Backup erstellen (falls DB läuft)
            echo "Creating database backup..."
            if /usr/bin/docker compose ps | /bin/grep -q gifthuette-db; then
              /usr/bin/docker compose exec -T db pg_dump -U gifthuette_user gifthuette > "backups/backup-$(/bin/date +%Y%m%d-%H%M%S).sql" 2>/dev/null || echo "Backup failed, continuing..."
            fi
            
            # Aktuelles Backend stoppen
            echo "Stopping current backend..."
            /usr/bin/docker compose stop backend 2>/dev/null || true
            
            # Neues Image pullen
            echo "Pulling new backend image..."
            export IMAGE_TAG=backend-latest
            /usr/bin/docker compose pull backend
            
            # Services starten (DB und Redis zuerst, dann Backend)
            echo "Starting database and redis..."
            /usr/bin/docker compose up -d db redis
            
            # Kurz warten bis DB bereit ist
            echo "Waiting for database to be ready..."
            /bin/sleep 10
            
            # Backend starten
            echo "Starting backend..."
            /usr/bin/docker compose up -d backend
            
            # Warten bis Backend bereit ist (mit Timeout)
            echo "Waiting for backend to be ready..."
            for i in {1..30}; do
              if /usr/bin/curl -f http://localhost:3000/health >/dev/null 2>&1; then
                echo "Backend is ready!"
                break
              fi
              echo "Waiting... ($i/30)"
              /bin/sleep 2
            done
            
            # Datenbank migrieren
            echo "Running database migrations..."
            /usr/bin/docker compose exec -T backend npx prisma migrate deploy || echo "Migration failed, but continuing..."
            
            # Final status check
            echo "Checking final status..."
            /usr/bin/docker compose ps
            
            # Health check
            if /usr/bin/curl -f http://localhost:3000/health >/dev/null 2>&1; then
              echo "✅ Deployment successful! Backend is healthy."
            else
              echo "⚠️  Deployment completed but health check failed."
              echo "Backend logs:"
              /usr/bin/docker compose logs --tail=20 backend
            fi
