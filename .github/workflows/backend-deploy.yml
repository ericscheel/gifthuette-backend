name: Backend Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=raw,value=backend-latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=production

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /opt/gifthuette
            
            # PATH explizit setzen
            export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            
            # Backup erstellen (falls DB läuft)
            if /usr/bin/docker compose ps | /bin/grep -q gifthuette-db; then
              /usr/bin/docker compose exec -T db pg_dump -U gifthuette_user gifthuette > "backups/backup-$(/bin/date +%Y%m%d-%H%M%S).sql" || true
            fi
            
            # Image pullen
            export IMAGE_TAG=backend-latest
            /usr/bin/docker compose pull backend
            
            # Services starten
            /usr/bin/docker compose up -d
            
            # Warten bis Backend bereit ist
            echo "Waiting for backend to be ready..."
            /usr/bin/timeout 60 /bin/bash -c 'until /usr/bin/curl -f http://localhost:3000/health; do sleep 2; done'
            
            # Datenbank migrieren
            /usr/bin/docker compose exec -T backend npx prisma migrate deploy
            
            # Status prüfen
            /usr/bin/docker compose ps
            echo "✅ Deployment successful!"
